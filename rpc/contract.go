package rpc

import (
	"bytes"

	"github.com/patractlabs/go-patract/api"
	"github.com/patractlabs/go-patract/types"
	"github.com/patractlabs/go-patract/utils"
	"github.com/pkg/errors"
)

// Instantiate is a new contract from the `codehash` generated by `put_code`,
// optionally transferring some balance.
func (c *Contract) Instantiate(
	ctx api.Context,
	endowment types.CompactBalance,
	gasLimit types.CompactGas,
	codeHash types.CodeHash,
	args ...interface{}) (types.Hash, types.AccountID, error) {
	data, err := c.getConstructorsData([]string{"new"}, args...)
	if err != nil {
		return types.Hash{}, types.AccountID{}, err
	}

	deployer, err := utils.DecodeAccountIDFromSS58(ctx.From().Address)
	if err != nil {
		return types.Hash{}, types.AccountID{}, errors.Wrap(err, "decode account")
	}

	hash, err := c.native.Cli.SubmitAndWaitExtrinsic(
		ctx, "Contracts.instantiate", endowment, gasLimit, codeHash, data)

	if err != nil {
		return types.Hash{}, types.AccountID{}, err
	}

	contractAccount := GetContractAccountID(deployer, codeHash, data, []byte{})
	return hash, contractAccount, nil
}

// GetContractAccountID get constract account ID
func GetContractAccountID(deployer types.AccountID, codeHash types.CodeHash, inputData, salt []byte) types.AccountID {
	// in now version not process salt
	contractHashs := bytes.NewBuffer(make([]byte, 0, 256))

	// TODO: in new substrate version, add salt to generator accountID
	contractHashs.Write(codeHash[:])
	contractHashs.Write(utils.Hash256(inputData))
	contractHashs.Write(deployer[:])

	return types.NewAccountID(utils.Hash256(contractHashs.Bytes()))
}

// UpdateSchedule update schedule for contract
func (c *Contract) UpdateSchedule(ctx api.Context, schedule types.Schedule) (types.Hash, error) {
	return c.native.Cli.SubmitAndWaitExtrinsic(ctx, "Contracts.update_schedule", schedule)
}

// ClaimSurcharge claim surcharge
func (c *Contract) ClaimSurcharge(
	ctx api.Context,
	dest types.AccountID,
	auxSender types.OptionAccountID) (types.Hash, error) {
	return c.native.Cli.SubmitAndWaitExtrinsic(ctx, "Contracts.claim_surcharge", dest, auxSender)
}
