{"Modules":[{"Name":"System","HasStorage":true,"Storage":{"Prefix":"System","Items":[{"Name":"Account","Modifier":{"IsOptional":false,"IsDefault":true,"IsRequired":false},"Type":{"IsType":false,"AsType":"","IsMap":true,"AsMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":true,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false},"Key":"T::AccountId","Value":"AccountInfo\u003cT::Index, T::AccountData\u003e","Linked":false},"IsDoubleMap":false,"AsDoubleMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false},"Key1":"","Key2":"","Value":"","Key2Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false}}},"Fallback":"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA","Documentation":[" The full account information for a particular account ID."]},{"Name":"ExtrinsicCount","Modifier":{"IsOptional":true,"IsDefault":false,"IsRequired":false},"Type":{"IsType":true,"AsType":"u32","IsMap":false,"AsMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false},"Key":"","Value":"","Linked":false},"IsDoubleMap":false,"AsDoubleMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false},"Key1":"","Key2":"","Value":"","Key2Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false}}},"Fallback":"AA==","Documentation":[" Total extrinsics count for the current block."]},{"Name":"BlockWeight","Modifier":{"IsOptional":false,"IsDefault":true,"IsRequired":false},"Type":{"IsType":true,"AsType":"weight::ExtrinsicsWeight","IsMap":false,"AsMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false},"Key":"","Value":"","Linked":false},"IsDoubleMap":false,"AsDoubleMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false},"Key1":"","Key2":"","Value":"","Key2Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false}}},"Fallback":"AAAAAAAAAAAAAAAAAAAAAA==","Documentation":[" The current weight for the block."]},{"Name":"AllExtrinsicsLen","Modifier":{"IsOptional":true,"IsDefault":false,"IsRequired":false},"Type":{"IsType":true,"AsType":"u32","IsMap":false,"AsMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false},"Key":"","Value":"","Linked":false},"IsDoubleMap":false,"AsDoubleMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false},"Key1":"","Key2":"","Value":"","Key2Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false}}},"Fallback":"AA==","Documentation":[" Total length (in bytes) for all extrinsics put together, for the current block."]},{"Name":"BlockHash","Modifier":{"IsOptional":false,"IsDefault":true,"IsRequired":false},"Type":{"IsType":false,"AsType":"","IsMap":true,"AsMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":true,"IsIdentity":false},"Key":"T::BlockNumber","Value":"T::Hash","Linked":false},"IsDoubleMap":false,"AsDoubleMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false},"Key1":"","Key2":"","Value":"","Key2Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false}}},"Fallback":"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=","Documentation":[" Map of block numbers to block hashes."]},{"Name":"ExtrinsicData","Modifier":{"IsOptional":false,"IsDefault":true,"IsRequired":false},"Type":{"IsType":false,"AsType":"","IsMap":true,"AsMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":true,"IsIdentity":false},"Key":"u32","Value":"Vec\u003cu8\u003e","Linked":false},"IsDoubleMap":false,"AsDoubleMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false},"Key1":"","Key2":"","Value":"","Key2Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false}}},"Fallback":"AA==","Documentation":[" Extrinsics data for the current block (maps an extrinsic's index to its data)."]},{"Name":"Number","Modifier":{"IsOptional":false,"IsDefault":true,"IsRequired":false},"Type":{"IsType":true,"AsType":"T::BlockNumber","IsMap":false,"AsMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false},"Key":"","Value":"","Linked":false},"IsDoubleMap":false,"AsDoubleMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false},"Key1":"","Key2":"","Value":"","Key2Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false}}},"Fallback":"AAAAAA==","Documentation":[" The current block number being processed. Set by `execute_block`."]},{"Name":"ParentHash","Modifier":{"IsOptional":false,"IsDefault":true,"IsRequired":false},"Type":{"IsType":true,"AsType":"T::Hash","IsMap":false,"AsMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false},"Key":"","Value":"","Linked":false},"IsDoubleMap":false,"AsDoubleMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false},"Key1":"","Key2":"","Value":"","Key2Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false}}},"Fallback":"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=","Documentation":[" Hash of the previous block."]},{"Name":"ExtrinsicsRoot","Modifier":{"IsOptional":false,"IsDefault":true,"IsRequired":false},"Type":{"IsType":true,"AsType":"T::Hash","IsMap":false,"AsMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false},"Key":"","Value":"","Linked":false},"IsDoubleMap":false,"AsDoubleMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false},"Key1":"","Key2":"","Value":"","Key2Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false}}},"Fallback":"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=","Documentation":[" Extrinsics root of the current block, also part of the block header."]},{"Name":"Digest","Modifier":{"IsOptional":false,"IsDefault":true,"IsRequired":false},"Type":{"IsType":true,"AsType":"DigestOf\u003cT\u003e","IsMap":false,"AsMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false},"Key":"","Value":"","Linked":false},"IsDoubleMap":false,"AsDoubleMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false},"Key1":"","Key2":"","Value":"","Key2Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false}}},"Fallback":"AA==","Documentation":[" Digest of the current block, also part of the block header."]},{"Name":"Events","Modifier":{"IsOptional":false,"IsDefault":true,"IsRequired":false},"Type":{"IsType":true,"AsType":"Vec\u003cEventRecord\u003cT::Event, T::Hash\u003e\u003e","IsMap":false,"AsMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false},"Key":"","Value":"","Linked":false},"IsDoubleMap":false,"AsDoubleMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false},"Key1":"","Key2":"","Value":"","Key2Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false}}},"Fallback":"AA==","Documentation":[" Events deposited for the current block."]},{"Name":"EventCount","Modifier":{"IsOptional":false,"IsDefault":true,"IsRequired":false},"Type":{"IsType":true,"AsType":"EventIndex","IsMap":false,"AsMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false},"Key":"","Value":"","Linked":false},"IsDoubleMap":false,"AsDoubleMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false},"Key1":"","Key2":"","Value":"","Key2Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false}}},"Fallback":"AAAAAA==","Documentation":[" The number of events in the `Events\u003cT\u003e` list."]},{"Name":"EventTopics","Modifier":{"IsOptional":false,"IsDefault":true,"IsRequired":false},"Type":{"IsType":false,"AsType":"","IsMap":true,"AsMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":true,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false},"Key":"T::Hash","Value":"Vec\u003c(T::BlockNumber, EventIndex)\u003e","Linked":false},"IsDoubleMap":false,"AsDoubleMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false},"Key1":"","Key2":"","Value":"","Key2Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false}}},"Fallback":"AA==","Documentation":[" Mapping between a topic (represented by T::Hash) and a vector of indexes"," of events in the `\u003cEvents\u003cT\u003e\u003e` list.",""," All topic vectors have deterministic storage locations depending on the topic. This"," allows light-clients to leverage the changes trie storage tracking mechanism and"," in case of changes fetch the list of events of interest.",""," The value has the type `(T::BlockNumber, EventIndex)` because if we used only just"," the `EventIndex` then in case if the topic has the same contents on the next block"," no notification will be triggered thus the event might be lost."]},{"Name":"LastRuntimeUpgrade","Modifier":{"IsOptional":true,"IsDefault":false,"IsRequired":false},"Type":{"IsType":true,"AsType":"LastRuntimeUpgradeInfo","IsMap":false,"AsMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false},"Key":"","Value":"","Linked":false},"IsDoubleMap":false,"AsDoubleMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false},"Key1":"","Key2":"","Value":"","Key2Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false}}},"Fallback":"AA==","Documentation":[" Stores the `spec_version` and `spec_name` of when the last runtime upgrade happened."]},{"Name":"UpgradedToU32RefCount","Modifier":{"IsOptional":false,"IsDefault":true,"IsRequired":false},"Type":{"IsType":true,"AsType":"bool","IsMap":false,"AsMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false},"Key":"","Value":"","Linked":false},"IsDoubleMap":false,"AsDoubleMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false},"Key1":"","Key2":"","Value":"","Key2Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false}}},"Fallback":"AA==","Documentation":[" True if we have upgraded so that `type RefCount` is `u32`. False (default) if not."]},{"Name":"ExecutionPhase","Modifier":{"IsOptional":true,"IsDefault":false,"IsRequired":false},"Type":{"IsType":true,"AsType":"Phase","IsMap":false,"AsMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false},"Key":"","Value":"","Linked":false},"IsDoubleMap":false,"AsDoubleMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false},"Key1":"","Key2":"","Value":"","Key2Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false}}},"Fallback":"AA==","Documentation":[" The execution phase of the block."]}]},"HasCalls":true,"Calls":[{"Name":"fill_block","Args":[{"Name":"_ratio","Type":"Perbill"}],"Documentation":[" A dispatch that will fill the block weight up to the given ratio."]},{"Name":"remark","Args":[{"Name":"_remark","Type":"Vec\u003cu8\u003e"}],"Documentation":[" Make some on-chain remark.",""," # \u003cweight\u003e"," - `O(1)`"," - Base Weight: 0.665 µs, independent of remark length."," - No DB operations."," # \u003c/weight\u003e"]},{"Name":"set_heap_pages","Args":[{"Name":"pages","Type":"u64"}],"Documentation":[" Set the number of pages in the WebAssembly environment's heap.",""," # \u003cweight\u003e"," - `O(1)`"," - 1 storage write."," - Base Weight: 1.405 µs"," - 1 write to HEAP_PAGES"," # \u003c/weight\u003e"]},{"Name":"set_code","Args":[{"Name":"code","Type":"Vec\u003cu8\u003e"}],"Documentation":[" Set the new runtime code.",""," # \u003cweight\u003e"," - `O(C + S)` where `C` length of `code` and `S` complexity of `can_set_code`"," - 1 storage write (codec `O(C)`)."," - 1 call to `can_set_code`: `O(S)` (calls `sp_io::misc::runtime_version` which is expensive)."," - 1 event."," The weight of this function is dependent on the runtime, but generally this is very expensive."," We will treat this as a full block."," # \u003c/weight\u003e"]},{"Name":"set_code_without_checks","Args":[{"Name":"code","Type":"Vec\u003cu8\u003e"}],"Documentation":[" Set the new runtime code without doing any checks of the given `code`.",""," # \u003cweight\u003e"," - `O(C)` where `C` length of `code`"," - 1 storage write (codec `O(C)`)."," - 1 event."," The weight of this function is dependent on the runtime. We will treat this as a full block."," # \u003c/weight\u003e"]},{"Name":"set_changes_trie_config","Args":[{"Name":"changes_trie_config","Type":"Option\u003cChangesTrieConfiguration\u003e"}],"Documentation":[" Set the new changes trie configuration.",""," # \u003cweight\u003e"," - `O(1)`"," - 1 storage write or delete (codec `O(1)`)."," - 1 call to `deposit_log`: Uses `append` API, so O(1)"," - Base Weight: 7.218 µs"," - DB Weight:","     - Writes: Changes Trie, System Digest"," # \u003c/weight\u003e"]},{"Name":"set_storage","Args":[{"Name":"items","Type":"Vec\u003cKeyValue\u003e"}],"Documentation":[" Set some items of storage.",""," # \u003cweight\u003e"," - `O(I)` where `I` length of `items`"," - `I` storage writes (`O(1)`)."," - Base Weight: 0.568 * i µs"," - Writes: Number of items"," # \u003c/weight\u003e"]},{"Name":"kill_storage","Args":[{"Name":"keys","Type":"Vec\u003cKey\u003e"}],"Documentation":[" Kill some items from storage.",""," # \u003cweight\u003e"," - `O(IK)` where `I` length of `keys` and `K` length of one key"," - `I` storage deletions."," - Base Weight: .378 * i µs"," - Writes: Number of items"," # \u003c/weight\u003e"]},{"Name":"kill_prefix","Args":[{"Name":"prefix","Type":"Key"},{"Name":"_subkeys","Type":"u32"}],"Documentation":[" Kill all storage items with a key that starts with the given prefix.",""," **NOTE:** We rely on the Root origin to provide us the number of subkeys under"," the prefix we are removing to accurately calculate the weight of this function.",""," # \u003cweight\u003e"," - `O(P)` where `P` amount of keys with prefix `prefix`"," - `P` storage deletions."," - Base Weight: 0.834 * P µs"," - Writes: Number of subkeys + 1"," # \u003c/weight\u003e"]},{"Name":"suicide","Args":null,"Documentation":[" Kill the sending account, assuming there are no references outstanding and the composite"," data is equal to its default value.",""," # \u003cweight\u003e"," - `O(1)`"," - 1 storage read and deletion."," --------------------"," Base Weight: 8.626 µs"," No DB Read or Write operations because caller is already in overlay"," # \u003c/weight\u003e"]}],"HasEvents":true,"Events":[{"Name":"ExtrinsicSuccess","Args":["DispatchInfo"],"Documentation":[" An extrinsic completed successfully. \\[info\\]"]},{"Name":"ExtrinsicFailed","Args":["DispatchError","DispatchInfo"],"Documentation":[" An extrinsic failed. \\[error, info\\]"]},{"Name":"CodeUpdated","Args":null,"Documentation":[" `:code` was updated."]},{"Name":"NewAccount","Args":["AccountId"],"Documentation":[" A new \\[account\\] was created."]},{"Name":"KilledAccount","Args":["AccountId"],"Documentation":[" An \\[account\\] was reaped."]}],"Constants":[{"Name":"BlockHashCount","Type":"T::BlockNumber","Value":"YAkAAA==","Documentation":[" The maximum number of blocks to allow in mortal eras."]},{"Name":"MaximumBlockWeight","Type":"Weight","Value":"ACBKqdEBAAA=","Documentation":[" The maximum weight of a block."]},{"Name":"DbWeight","Type":"RuntimeDbWeight","Value":"QHh9AQAAAAAA4fUFAAAAAA==","Documentation":[" The weight of runtime database operations the runtime can invoke."]},{"Name":"BlockExecutionWeight","Type":"Weight","Value":"APIFKgEAAAA=","Documentation":[" The base weight of executing a block, independent of the transactions in the block."]},{"Name":"ExtrinsicBaseWeight","Type":"Weight","Value":"QFlzBwAAAAA=","Documentation":[" The base weight of an Extrinsic in the block, independent of the of extrinsic being executed."]},{"Name":"MaximumBlockLength","Type":"u32","Value":"AABQAA==","Documentation":[" The maximum length of a block (in bytes)."]}],"Errors":[{"Name":"InvalidSpecName","Documentation":[" The name of specification does not match between the current runtime"," and the new runtime."]},{"Name":"SpecVersionNeedsToIncrease","Documentation":[" The specification version is not allowed to decrease between the current runtime"," and the new runtime."]},{"Name":"FailedToExtractRuntimeVersion","Documentation":[" Failed to extract the runtime version from the new runtime.",""," Either calling `Core_version` or decoding `RuntimeVersion` failed."]},{"Name":"NonDefaultComposite","Documentation":[" Suicide called when the account has non-default composite data."]},{"Name":"NonZeroRefCount","Documentation":[" There is a non-zero reference count preventing the account from being purged."]}],"Index":0},{"Name":"RandomnessCollectiveFlip","HasStorage":true,"Storage":{"Prefix":"RandomnessCollectiveFlip","Items":[{"Name":"RandomMaterial","Modifier":{"IsOptional":false,"IsDefault":true,"IsRequired":false},"Type":{"IsType":true,"AsType":"Vec\u003cT::Hash\u003e","IsMap":false,"AsMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false},"Key":"","Value":"","Linked":false},"IsDoubleMap":false,"AsDoubleMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false},"Key1":"","Key2":"","Value":"","Key2Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false}}},"Fallback":"AA==","Documentation":[" Series of block headers from the last 81 blocks that acts as random seed material. This"," is arranged as a ring buffer with `block_number % 81` being the index into the `Vec` of"," the oldest hash."]}]},"HasCalls":true,"Calls":null,"HasEvents":false,"Events":null,"Constants":null,"Errors":null,"Index":1},{"Name":"Timestamp","HasStorage":true,"Storage":{"Prefix":"Timestamp","Items":[{"Name":"Now","Modifier":{"IsOptional":false,"IsDefault":true,"IsRequired":false},"Type":{"IsType":true,"AsType":"T::Moment","IsMap":false,"AsMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false},"Key":"","Value":"","Linked":false},"IsDoubleMap":false,"AsDoubleMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false},"Key1":"","Key2":"","Value":"","Key2Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false}}},"Fallback":"AAAAAAAAAAA=","Documentation":[" Current time for the current block."]},{"Name":"DidUpdate","Modifier":{"IsOptional":false,"IsDefault":true,"IsRequired":false},"Type":{"IsType":true,"AsType":"bool","IsMap":false,"AsMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false},"Key":"","Value":"","Linked":false},"IsDoubleMap":false,"AsDoubleMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false},"Key1":"","Key2":"","Value":"","Key2Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false}}},"Fallback":"AA==","Documentation":[" Did the timestamp get updated in this block?"]}]},"HasCalls":true,"Calls":[{"Name":"set","Args":[{"Name":"now","Type":"Compact\u003cT::Moment\u003e"}],"Documentation":[" Set the current time.",""," This call should be invoked exactly once per block. It will panic at the finalization"," phase, if this call hasn't been invoked by that time.",""," The timestamp should be greater than the previous one by the amount specified by"," `MinimumPeriod`.",""," The dispatch origin for this call must be `Inherent`.",""," # \u003cweight\u003e"," - `O(1)` (Note that implementations of `OnTimestampSet` must also be `O(1)`)"," - 1 storage read and 1 storage mutation (codec `O(1)`). (because of `DidUpdate::take` in `on_finalize`)"," - 1 event handler `on_timestamp_set`. Must be `O(1)`."," # \u003c/weight\u003e"]}],"HasEvents":false,"Events":null,"Constants":[{"Name":"MinimumPeriod","Type":"T::Moment","Value":"uAsAAAAAAAA=","Documentation":[" The minimum period between blocks. Beware that this is different to the *expected* period"," that the block production apparatus provides. Your chosen consensus system will generally"," work with this to determine a sensible block time. e.g. For Aura, it will be double this"," period on default settings."]}],"Errors":null,"Index":2},{"Name":"Aura","HasStorage":false,"Storage":{"Prefix":"","Items":null},"HasCalls":false,"Calls":null,"HasEvents":false,"Events":null,"Constants":null,"Errors":null,"Index":3},{"Name":"Grandpa","HasStorage":true,"Storage":{"Prefix":"GrandpaFinality","Items":[{"Name":"State","Modifier":{"IsOptional":false,"IsDefault":true,"IsRequired":false},"Type":{"IsType":true,"AsType":"StoredState\u003cT::BlockNumber\u003e","IsMap":false,"AsMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false},"Key":"","Value":"","Linked":false},"IsDoubleMap":false,"AsDoubleMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false},"Key1":"","Key2":"","Value":"","Key2Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false}}},"Fallback":"AA==","Documentation":[" State of the current authority set."]},{"Name":"PendingChange","Modifier":{"IsOptional":true,"IsDefault":false,"IsRequired":false},"Type":{"IsType":true,"AsType":"StoredPendingChange\u003cT::BlockNumber\u003e","IsMap":false,"AsMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false},"Key":"","Value":"","Linked":false},"IsDoubleMap":false,"AsDoubleMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false},"Key1":"","Key2":"","Value":"","Key2Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false}}},"Fallback":"AA==","Documentation":[" Pending change: (signaled at, scheduled change)."]},{"Name":"NextForced","Modifier":{"IsOptional":true,"IsDefault":false,"IsRequired":false},"Type":{"IsType":true,"AsType":"T::BlockNumber","IsMap":false,"AsMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false},"Key":"","Value":"","Linked":false},"IsDoubleMap":false,"AsDoubleMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false},"Key1":"","Key2":"","Value":"","Key2Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false}}},"Fallback":"AA==","Documentation":[" next block number where we can force a change."]},{"Name":"Stalled","Modifier":{"IsOptional":true,"IsDefault":false,"IsRequired":false},"Type":{"IsType":true,"AsType":"(T::BlockNumber, T::BlockNumber)","IsMap":false,"AsMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false},"Key":"","Value":"","Linked":false},"IsDoubleMap":false,"AsDoubleMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false},"Key1":"","Key2":"","Value":"","Key2Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false}}},"Fallback":"AA==","Documentation":[" `true` if we are currently stalled."]},{"Name":"CurrentSetId","Modifier":{"IsOptional":false,"IsDefault":true,"IsRequired":false},"Type":{"IsType":true,"AsType":"SetId","IsMap":false,"AsMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false},"Key":"","Value":"","Linked":false},"IsDoubleMap":false,"AsDoubleMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false},"Key1":"","Key2":"","Value":"","Key2Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false}}},"Fallback":"AAAAAAAAAAA=","Documentation":[" The number of changes (both in terms of keys and underlying economic responsibilities)"," in the \"set\" of Grandpa validators from genesis."]},{"Name":"SetIdSession","Modifier":{"IsOptional":true,"IsDefault":false,"IsRequired":false},"Type":{"IsType":false,"AsType":"","IsMap":true,"AsMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":true,"IsIdentity":false},"Key":"SetId","Value":"SessionIndex","Linked":false},"IsDoubleMap":false,"AsDoubleMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false},"Key1":"","Key2":"","Value":"","Key2Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false}}},"Fallback":"AA==","Documentation":[" A mapping from grandpa set ID to the index of the *most recent* session for which its"," members were responsible.",""," TWOX-NOTE: `SetId` is not under user control."]}]},"HasCalls":true,"Calls":[{"Name":"report_equivocation","Args":[{"Name":"equivocation_proof","Type":"EquivocationProof\u003cT::Hash, T::BlockNumber\u003e"},{"Name":"key_owner_proof","Type":"T::KeyOwnerProof"}],"Documentation":[" Report voter equivocation/misbehavior. This method will verify the"," equivocation proof and validate the given key ownership proof"," against the extracted offender. If both are valid, the offence"," will be reported."]},{"Name":"report_equivocation_unsigned","Args":[{"Name":"equivocation_proof","Type":"EquivocationProof\u003cT::Hash, T::BlockNumber\u003e"},{"Name":"key_owner_proof","Type":"T::KeyOwnerProof"}],"Documentation":[" Report voter equivocation/misbehavior. This method will verify the"," equivocation proof and validate the given key ownership proof"," against the extracted offender. If both are valid, the offence"," will be reported.",""," This extrinsic must be called unsigned and it is expected that only"," block authors will call it (validated in `ValidateUnsigned`), as such"," if the block author is defined it will be defined as the equivocation"," reporter."]},{"Name":"note_stalled","Args":[{"Name":"delay","Type":"T::BlockNumber"},{"Name":"best_finalized_block_number","Type":"T::BlockNumber"}],"Documentation":[" Note that the current authority set of the GRANDPA finality gadget has"," stalled. This will trigger a forced authority set change at the beginning"," of the next session, to be enacted `delay` blocks after that. The delay"," should be high enough to safely assume that the block signalling the"," forced change will not be re-orged (e.g. 1000 blocks). The GRANDPA voters"," will start the new authority set using the given finalized block as base."," Only callable by root."]}],"HasEvents":true,"Events":[{"Name":"NewAuthorities","Args":["AuthorityList"],"Documentation":[" New authority set has been applied. \\[authority_set\\]"]},{"Name":"Paused","Args":null,"Documentation":[" Current authority set has been paused."]},{"Name":"Resumed","Args":null,"Documentation":[" Current authority set has been resumed."]}],"Constants":null,"Errors":[{"Name":"PauseFailed","Documentation":[" Attempt to signal GRANDPA pause when the authority set isn't live"," (either paused or already pending pause)."]},{"Name":"ResumeFailed","Documentation":[" Attempt to signal GRANDPA resume when the authority set isn't paused"," (either live or already pending resume)."]},{"Name":"ChangePending","Documentation":[" Attempt to signal GRANDPA change with one already pending."]},{"Name":"TooSoon","Documentation":[" Cannot signal forced change so soon after last."]},{"Name":"InvalidKeyOwnershipProof","Documentation":[" A key ownership proof provided as part of an equivocation report is invalid."]},{"Name":"InvalidEquivocationProof","Documentation":[" An equivocation proof provided as part of an equivocation report is invalid."]},{"Name":"DuplicateOffenceReport","Documentation":[" A given equivocation report is valid but already previously reported."]}],"Index":4},{"Name":"Balances","HasStorage":true,"Storage":{"Prefix":"Balances","Items":[{"Name":"TotalIssuance","Modifier":{"IsOptional":false,"IsDefault":true,"IsRequired":false},"Type":{"IsType":true,"AsType":"T::Balance","IsMap":false,"AsMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false},"Key":"","Value":"","Linked":false},"IsDoubleMap":false,"AsDoubleMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false},"Key1":"","Key2":"","Value":"","Key2Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false}}},"Fallback":"AAAAAAAAAAAAAAAAAAAAAA==","Documentation":[" The total units issued in the system."]},{"Name":"Account","Modifier":{"IsOptional":false,"IsDefault":true,"IsRequired":false},"Type":{"IsType":false,"AsType":"","IsMap":true,"AsMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":true,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false},"Key":"T::AccountId","Value":"AccountData\u003cT::Balance\u003e","Linked":false},"IsDoubleMap":false,"AsDoubleMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false},"Key1":"","Key2":"","Value":"","Key2Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false}}},"Fallback":"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==","Documentation":[" The balance of an account.",""," NOTE: This is only used in the case that this module is used to store balances."]},{"Name":"Locks","Modifier":{"IsOptional":false,"IsDefault":true,"IsRequired":false},"Type":{"IsType":false,"AsType":"","IsMap":true,"AsMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":true,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false},"Key":"T::AccountId","Value":"Vec\u003cBalanceLock\u003cT::Balance\u003e\u003e","Linked":false},"IsDoubleMap":false,"AsDoubleMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false},"Key1":"","Key2":"","Value":"","Key2Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false}}},"Fallback":"AA==","Documentation":[" Any liquidity locks on some account balances."," NOTE: Should only be accessed when setting, changing and freeing a lock."]},{"Name":"StorageVersion","Modifier":{"IsOptional":false,"IsDefault":true,"IsRequired":false},"Type":{"IsType":true,"AsType":"Releases","IsMap":false,"AsMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false},"Key":"","Value":"","Linked":false},"IsDoubleMap":false,"AsDoubleMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false},"Key1":"","Key2":"","Value":"","Key2Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false}}},"Fallback":"AA==","Documentation":[" Storage version of the pallet.",""," This is set to v2.0.0 for new networks."]}]},"HasCalls":true,"Calls":[{"Name":"transfer","Args":[{"Name":"dest","Type":"\u003cT::Lookup as StaticLookup\u003e::Source"},{"Name":"value","Type":"Compact\u003cT::Balance\u003e"}],"Documentation":[" Transfer some liquid free balance to another account.",""," `transfer` will set the `FreeBalance` of the sender and receiver."," It will decrease the total issuance of the system by the `TransferFee`."," If the sender's account is below the existential deposit as a result"," of the transfer, the account will be reaped.",""," The dispatch origin for this call must be `Signed` by the transactor.",""," # \u003cweight\u003e"," - Dependent on arguments but not critical, given proper implementations for","   input config types. See related functions below."," - It contains a limited number of reads and writes internally and no complex computation.",""," Related functions:","","   - `ensure_can_withdraw` is always called internally but has a bounded complexity.","   - Transferring balances to accounts that did not exist before will cause","      `T::OnNewAccount::on_new_account` to be called.","   - Removing enough funds from an account will trigger `T::DustRemoval::on_unbalanced`.","   - `transfer_keep_alive` works the same way as `transfer`, but has an additional","     check that the transfer will not kill the origin account."," ---------------------------------"," - Base Weight: 73.64 µs, worst case scenario (account created, account removed)"," - DB Weight: 1 Read and 1 Write to destination account"," - Origin account is already in memory, so no DB operations for them."," # \u003c/weight\u003e"]},{"Name":"set_balance","Args":[{"Name":"who","Type":"\u003cT::Lookup as StaticLookup\u003e::Source"},{"Name":"new_free","Type":"Compact\u003cT::Balance\u003e"},{"Name":"new_reserved","Type":"Compact\u003cT::Balance\u003e"}],"Documentation":[" Set the balances of a given account.",""," This will alter `FreeBalance` and `ReservedBalance` in storage. it will"," also decrease the total issuance of the system (`TotalIssuance`)."," If the new free or reserved balance is below the existential deposit,"," it will reset the account nonce (`frame_system::AccountNonce`).",""," The dispatch origin for this call is `root`.",""," # \u003cweight\u003e"," - Independent of the arguments."," - Contains a limited number of reads and writes."," ---------------------"," - Base Weight:","     - Creating: 27.56 µs","     - Killing: 35.11 µs"," - DB Weight: 1 Read, 1 Write to `who`"," # \u003c/weight\u003e"]},{"Name":"force_transfer","Args":[{"Name":"source","Type":"\u003cT::Lookup as StaticLookup\u003e::Source"},{"Name":"dest","Type":"\u003cT::Lookup as StaticLookup\u003e::Source"},{"Name":"value","Type":"Compact\u003cT::Balance\u003e"}],"Documentation":[" Exactly as `transfer`, except the origin must be root and the source account may be"," specified."," # \u003cweight\u003e"," - Same as transfer, but additional read and write because the source account is","   not assumed to be in the overlay."," # \u003c/weight\u003e"]},{"Name":"transfer_keep_alive","Args":[{"Name":"dest","Type":"\u003cT::Lookup as StaticLookup\u003e::Source"},{"Name":"value","Type":"Compact\u003cT::Balance\u003e"}],"Documentation":[" Same as the [`transfer`] call, but with a check that the transfer will not kill the"," origin account.",""," 99% of the time you want [`transfer`] instead.",""," [`transfer`]: struct.Module.html#method.transfer"," # \u003cweight\u003e"," - Cheaper than transfer because account cannot be killed."," - Base Weight: 51.4 µs"," - DB Weight: 1 Read and 1 Write to dest (sender is in overlay already)"," #\u003c/weight\u003e"]}],"HasEvents":true,"Events":[{"Name":"Endowed","Args":["AccountId","Balance"],"Documentation":[" An account was created with some free balance. \\[account, free_balance\\]"]},{"Name":"DustLost","Args":["AccountId","Balance"],"Documentation":[" An account was removed whose balance was non-zero but below ExistentialDeposit,"," resulting in an outright loss. \\[account, balance\\]"]},{"Name":"Transfer","Args":["AccountId","AccountId","Balance"],"Documentation":[" Transfer succeeded. \\[from, to, value\\]"]},{"Name":"BalanceSet","Args":["AccountId","Balance","Balance"],"Documentation":[" A balance was set by root. \\[who, free, reserved\\]"]},{"Name":"Deposit","Args":["AccountId","Balance"],"Documentation":[" Some amount was deposited (e.g. for transaction fees). \\[who, deposit\\]"]},{"Name":"Reserved","Args":["AccountId","Balance"],"Documentation":[" Some balance was reserved (moved from free to reserved). \\[who, value\\]"]},{"Name":"Unreserved","Args":["AccountId","Balance"],"Documentation":[" Some balance was unreserved (moved from reserved to free). \\[who, value\\]"]},{"Name":"ReserveRepatriated","Args":["AccountId","AccountId","Balance","Status"],"Documentation":[" Some balance was moved from the reserve of the first account to the second account."," Final argument indicates the destination balance type."," \\[from, to, balance, destination_status\\]"]}],"Constants":[{"Name":"ExistentialDeposit","Type":"T::Balance","Value":"9AEAAAAAAAAAAAAAAAAAAA==","Documentation":[" The minimum amount required to keep an account open."]}],"Errors":[{"Name":"VestingBalance","Documentation":[" Vesting balance too high to send value"]},{"Name":"LiquidityRestrictions","Documentation":[" Account liquidity restrictions prevent withdrawal"]},{"Name":"Overflow","Documentation":[" Got an overflow after adding"]},{"Name":"InsufficientBalance","Documentation":[" Balance too low to send value"]},{"Name":"ExistentialDeposit","Documentation":[" Value too low to create account due to existential deposit"]},{"Name":"KeepAlive","Documentation":[" Transfer/payment would kill account"]},{"Name":"ExistingVestingSchedule","Documentation":[" A vesting schedule already exists for this account"]},{"Name":"DeadAccount","Documentation":[" Beneficiary account must pre-exist"]}],"Index":5},{"Name":"TransactionPayment","HasStorage":true,"Storage":{"Prefix":"TransactionPayment","Items":[{"Name":"NextFeeMultiplier","Modifier":{"IsOptional":false,"IsDefault":true,"IsRequired":false},"Type":{"IsType":true,"AsType":"Multiplier","IsMap":false,"AsMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false},"Key":"","Value":"","Linked":false},"IsDoubleMap":false,"AsDoubleMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false},"Key1":"","Key2":"","Value":"","Key2Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false}}},"Fallback":"AABkp7O24A0AAAAAAAAAAA==","Documentation":null},{"Name":"StorageVersion","Modifier":{"IsOptional":false,"IsDefault":true,"IsRequired":false},"Type":{"IsType":true,"AsType":"Releases","IsMap":false,"AsMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false},"Key":"","Value":"","Linked":false},"IsDoubleMap":false,"AsDoubleMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false},"Key1":"","Key2":"","Value":"","Key2Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false}}},"Fallback":"AA==","Documentation":null}]},"HasCalls":false,"Calls":null,"HasEvents":false,"Events":null,"Constants":[{"Name":"TransactionByteFee","Type":"BalanceOf\u003cT\u003e","Value":"So0OAAAAAAAAAAAAAAAAAA==","Documentation":[" The fee to be paid for making a transaction; the per-byte portion."]},{"Name":"WeightToFee","Type":"Vec\u003cWeightToFeeCoefficient\u003cBalanceOf\u003cT\u003e\u003e\u003e","Value":"BAEAAAAAAAAAAAAAAAAAAAAAAAAAAAE=","Documentation":[" The polynomial that is applied in order to derive fee from weight."]}],"Errors":null,"Index":6},{"Name":"Sudo","HasStorage":true,"Storage":{"Prefix":"Sudo","Items":[{"Name":"Key","Modifier":{"IsOptional":false,"IsDefault":true,"IsRequired":false},"Type":{"IsType":true,"AsType":"T::AccountId","IsMap":false,"AsMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false},"Key":"","Value":"","Linked":false},"IsDoubleMap":false,"AsDoubleMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false},"Key1":"","Key2":"","Value":"","Key2Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false}}},"Fallback":"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=","Documentation":[" The `AccountId` of the sudo key."]}]},"HasCalls":true,"Calls":[{"Name":"sudo","Args":[{"Name":"call","Type":"Box\u003c\u003cT as Trait\u003e::Call\u003e"}],"Documentation":[" Authenticates the sudo key and dispatches a function call with `Root` origin.",""," The dispatch origin for this call must be _Signed_.",""," # \u003cweight\u003e"," - O(1)."," - Limited storage reads."," - One DB write (event)."," - Weight of derivative `call` execution + 10,000."," # \u003c/weight\u003e"]},{"Name":"sudo_unchecked_weight","Args":[{"Name":"call","Type":"Box\u003c\u003cT as Trait\u003e::Call\u003e"},{"Name":"_weight","Type":"Weight"}],"Documentation":[" Authenticates the sudo key and dispatches a function call with `Root` origin."," This function does not check the weight of the call, and instead allows the"," Sudo user to specify the weight of the call.",""," The dispatch origin for this call must be _Signed_.",""," # \u003cweight\u003e"," - O(1)."," - The weight of this call is defined by the caller."," # \u003c/weight\u003e"]},{"Name":"set_key","Args":[{"Name":"new","Type":"\u003cT::Lookup as StaticLookup\u003e::Source"}],"Documentation":[" Authenticates the current sudo key and sets the given AccountId (`new`) as the new sudo key.",""," The dispatch origin for this call must be _Signed_.",""," # \u003cweight\u003e"," - O(1)."," - Limited storage reads."," - One DB change."," # \u003c/weight\u003e"]},{"Name":"sudo_as","Args":[{"Name":"who","Type":"\u003cT::Lookup as StaticLookup\u003e::Source"},{"Name":"call","Type":"Box\u003c\u003cT as Trait\u003e::Call\u003e"}],"Documentation":[" Authenticates the sudo key and dispatches a function call with `Signed` origin from"," a given account.",""," The dispatch origin for this call must be _Signed_.",""," # \u003cweight\u003e"," - O(1)."," - Limited storage reads."," - One DB write (event)."," - Weight of derivative `call` execution + 10,000."," # \u003c/weight\u003e"]}],"HasEvents":true,"Events":[{"Name":"Sudid","Args":["DispatchResult"],"Documentation":[" A sudo just took place. \\[result\\]"]},{"Name":"KeyChanged","Args":["AccountId"],"Documentation":[" The \\[sudoer\\] just switched identity; the old key is supplied."]},{"Name":"SudoAsDone","Args":["bool"],"Documentation":[" A sudo just took place. \\[result\\]"]}],"Constants":null,"Errors":[{"Name":"RequireSudo","Documentation":[" Sender must be the Sudo account"]}],"Index":7},{"Name":"Contracts","HasStorage":true,"Storage":{"Prefix":"Contracts","Items":[{"Name":"CurrentSchedule","Modifier":{"IsOptional":false,"IsDefault":true,"IsRequired":false},"Type":{"IsType":true,"AsType":"Schedule\u003cT\u003e","IsMap":false,"AsMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false},"Key":"","Value":"","Linked":false},"IsDoubleMap":false,"AsDoubleMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false},"Key1":"","Key2":"","Value":"","Key2Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false}}},"Fallback":"AAAAAAAEAAAAAAIAAAABAACAAAAAEAAAAAAQAAAAAQAAIAAAAAAACAB1BgAAwmwCAFd5AwBGFwAAOx0AAHMLAADwFwAA+ykAAFMAAADDawEAzgADAAQIAABnBwAA6QcAAHIHAAB/GQAAvCgAAGUIAAA1toQIjwgAAMoIAAAQCwAAewgAADwIAABQCAAAgQgAAN4JAADNCQAAowkAAIIJAACQCQAAgQkAAJ0JAACNCQAAxgkAAPwHAADcCQAAcgkAAHEJAADEHwAA7hsAAJofAACoGwAAMwkAAIoJAABUCQAAfgkAAJkJAACBCQAAvQkAALgJAADAozcAAAAAAKC+NwAAAAAAiBg3AAAAAAAa4HgAAAAAAHQ2NwAAAAAAYtk3AAAAAAB2VzcAAAAAAHiyfwAAAAAAagQ3AAAAAABgMTcAAAAAAJgGXAAAAAAAFCUcAAAAAADoRXIAAAAAAA0BAAAAAAAAAOpWAAAAAACTAgAAAAAAAPgSCCkAAAAAiJs1JAAAAAAO16wJAAAAALhhiwAAAAAAuNfJAAAAAADC3uMHAAAAAFAJAAAAAAAAFg2WAAAAAAAKUUkQAAAAAMwHAAAAAAAA4j12CgAAAAAg5BwCAAAAAJoFAAAAAAAAxN8FCwAAAAAQusQHAAAAAC7e2QoAAAAADAIAAAAAAADPAgAAAAAAACo0ax0AAAAA9gUAAAAAAADYAgAAAAAAAMbRMAAAAAAAFxAAAAAAAADA7jIAAAAAAMEMAAAAAAAAGp4uAAAAAADFBQAAAAAAACSALgAAAAAAxwUAAAAAAAA=","Documentation":[" Current cost schedule for contracts."]},{"Name":"PristineCode","Modifier":{"IsOptional":true,"IsDefault":false,"IsRequired":false},"Type":{"IsType":false,"AsType":"","IsMap":true,"AsMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":true},"Key":"CodeHash\u003cT\u003e","Value":"Vec\u003cu8\u003e","Linked":false},"IsDoubleMap":false,"AsDoubleMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false},"Key1":"","Key2":"","Value":"","Key2Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false}}},"Fallback":"AA==","Documentation":[" A mapping from an original code hash to the original code, untouched by instrumentation."]},{"Name":"CodeStorage","Modifier":{"IsOptional":true,"IsDefault":false,"IsRequired":false},"Type":{"IsType":false,"AsType":"","IsMap":true,"AsMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":true},"Key":"CodeHash\u003cT\u003e","Value":"wasm::PrefabWasmModule","Linked":false},"IsDoubleMap":false,"AsDoubleMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false},"Key1":"","Key2":"","Value":"","Key2Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false}}},"Fallback":"AA==","Documentation":[" A mapping between an original code hash and instrumented wasm code, ready for execution."]},{"Name":"AccountCounter","Modifier":{"IsOptional":false,"IsDefault":true,"IsRequired":false},"Type":{"IsType":true,"AsType":"u64","IsMap":false,"AsMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false},"Key":"","Value":"","Linked":false},"IsDoubleMap":false,"AsDoubleMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false},"Key1":"","Key2":"","Value":"","Key2Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false}}},"Fallback":"AAAAAAAAAAA=","Documentation":[" The subtrie counter."]},{"Name":"ContractInfoOf","Modifier":{"IsOptional":true,"IsDefault":false,"IsRequired":false},"Type":{"IsType":false,"AsType":"","IsMap":true,"AsMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":true,"IsIdentity":false},"Key":"T::AccountId","Value":"ContractInfo\u003cT\u003e","Linked":false},"IsDoubleMap":false,"AsDoubleMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false},"Key1":"","Key2":"","Value":"","Key2Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false}}},"Fallback":"AA==","Documentation":[" The code associated with a given account.",""," TWOX-NOTE: SAFE since `AccountId` is a secure hash."]}]},"HasCalls":true,"Calls":[{"Name":"update_schedule","Args":[{"Name":"schedule","Type":"Schedule\u003cT\u003e"}],"Documentation":[" Updates the schedule for metering contracts.",""," The schedule must have a greater version than the stored schedule."]},{"Name":"put_code","Args":[{"Name":"code","Type":"Vec\u003cu8\u003e"}],"Documentation":[" Stores the given binary Wasm code into the chain's storage and returns its `codehash`."," You can instantiate contracts only with stored code."]},{"Name":"call","Args":[{"Name":"dest","Type":"\u003cT::Lookup as StaticLookup\u003e::Source"},{"Name":"value","Type":"Compact\u003cBalanceOf\u003cT\u003e\u003e"},{"Name":"gas_limit","Type":"Compact\u003cGas\u003e"},{"Name":"data","Type":"Vec\u003cu8\u003e"}],"Documentation":[" Makes a call to an account, optionally transferring some balance.",""," * If the account is a smart-contract account, the associated code will be"," executed and any value will be transferred."," * If the account is a regular account, any value will be transferred."," * If no account exists and the call value is not less than `existential_deposit`,"," a regular account will be created and any value will be transferred."]},{"Name":"instantiate","Args":[{"Name":"endowment","Type":"Compact\u003cBalanceOf\u003cT\u003e\u003e"},{"Name":"gas_limit","Type":"Compact\u003cGas\u003e"},{"Name":"code_hash","Type":"CodeHash\u003cT\u003e"},{"Name":"data","Type":"Vec\u003cu8\u003e"}],"Documentation":[" Instantiates a new contract from the `codehash` generated by `put_code`, optionally transferring some balance.",""," Instantiation is executed as follows:",""," - The destination address is computed based on the sender and hash of the code."," - The smart-contract account is created at the computed address."," - The `ctor_code` is executed in the context of the newly-created account. Buffer returned","   after the execution is saved as the `code` of the account. That code will be invoked","   upon any call received by this account."," - The contract is initialized."]},{"Name":"claim_surcharge","Args":[{"Name":"dest","Type":"T::AccountId"},{"Name":"aux_sender","Type":"Option\u003cT::AccountId\u003e"}],"Documentation":[" Allows block producers to claim a small reward for evicting a contract. If a block producer"," fails to do so, a regular users will be allowed to claim the reward.",""," If contract is not evicted as a result of this call, no actions are taken and"," the sender is not eligible for the reward."]}],"HasEvents":true,"Events":[{"Name":"Instantiated","Args":["AccountId","AccountId"],"Documentation":[" Contract deployed by address at the specified address. \\[owner, contract\\]"]},{"Name":"Evicted","Args":["AccountId","bool"],"Documentation":[" Contract has been evicted and is now in tombstone state."," \\[contract, tombstone\\]",""," # Params",""," - `contract`: `AccountId`: The account ID of the evicted contract."," - `tombstone`: `bool`: True if the evicted contract left behind a tombstone."]},{"Name":"Restored","Args":["AccountId","AccountId","Hash","Balance"],"Documentation":[" Restoration for a contract has been successful."," \\[donor, dest, code_hash, rent_allowance\\]",""," # Params",""," - `donor`: `AccountId`: Account ID of the restoring contract"," - `dest`: `AccountId`: Account ID of the restored contract"," - `code_hash`: `Hash`: Code hash of the restored contract"," - `rent_allowance: `Balance`: Rent allowance of the restored contract"]},{"Name":"CodeStored","Args":["Hash"],"Documentation":[" Code with the specified hash has been stored."," \\[code_hash\\]"]},{"Name":"ScheduleUpdated","Args":["u32"],"Documentation":[" Triggered when the current \\[schedule\\] is updated."]},{"Name":"ContractExecution","Args":["AccountId","Vec\u003cu8\u003e"],"Documentation":[" An event deposited upon execution of a contract from the account."," \\[account, data\\]"]}],"Constants":[{"Name":"SignedClaimHandicap","Type":"T::BlockNumber","Value":"AgAAAA==","Documentation":[" Number of block delay an extrinsic claim surcharge has.",""," When claim surcharge is called by an extrinsic the rent is checked"," for current_block - delay"]},{"Name":"TombstoneDeposit","Type":"BalanceOf\u003cT\u003e","Value":"AKCsuQMAAAAAAAAAAAAAAA==","Documentation":[" The minimum amount required to generate a tombstone."]},{"Name":"StorageSizeOffset","Type":"u32","Value":"CAAAAA==","Documentation":[" A size offset for an contract. A just created account with untouched storage will have that"," much of storage from the perspective of the state rent.",""," This is a simple way to ensure that contracts with empty storage eventually get deleted"," by making them pay rent. This creates an incentive to remove them early in order to save"," rent."]},{"Name":"RentByteFee","Type":"BalanceOf\u003cT\u003e","Value":"oIYBAAAAAAAAAAAAAAAAAA==","Documentation":[" Price of a byte of storage per one block interval. Should be greater than 0."]},{"Name":"RentDepositOffset","Type":"BalanceOf\u003cT\u003e","Value":"ABCl1OgAAAAAAAAAAAAAAA==","Documentation":[" The amount of funds a contract should deposit in order to offset"," the cost of one byte.",""," Let's suppose the deposit is 1,000 BU (balance units)/byte and the rent is 1 BU/byte/day,"," then a contract with 1,000,000 BU that uses 1,000 bytes of storage would pay no rent."," But if the balance reduced to 500,000 BU and the storage stayed the same at 1,000,"," then it would pay 500 BU/day."]},{"Name":"SurchargeReward","Type":"BalanceOf\u003cT\u003e","Value":"AFyy7CIAAAAAAAAAAAAAAA==","Documentation":[" Reward that is received by the party whose touch has led"," to removal of a contract."]},{"Name":"MaxDepth","Type":"u32","Value":"IAAAAA==","Documentation":[" The maximum nesting level of a call/instantiate stack. A reasonable default"," value is 100."]},{"Name":"MaxValueSize","Type":"u32","Value":"AEAAAA==","Documentation":[" The maximum size of a storage value in bytes. A reasonable default is 16 KiB."]}],"Errors":[{"Name":"InvalidScheduleVersion","Documentation":[" A new schedule must have a greater version than the current one."]},{"Name":"InvalidSurchargeClaim","Documentation":[" An origin must be signed or inherent and auxiliary sender only provided on inherent."]},{"Name":"InvalidSourceContract","Documentation":[" Cannot restore from nonexisting or tombstone contract."]},{"Name":"InvalidDestinationContract","Documentation":[" Cannot restore to nonexisting or alive contract."]},{"Name":"InvalidTombstone","Documentation":[" Tombstones don't match."]},{"Name":"InvalidContractOrigin","Documentation":[" An origin TrieId written in the current block."]},{"Name":"OutOfGas","Documentation":[" The executed contract exhausted its gas limit."]},{"Name":"OutputBufferTooSmall","Documentation":[" The output buffer supplied to a contract API call was too small."]},{"Name":"BelowSubsistenceThreshold","Documentation":[" Performing the requested transfer would have brought the contract below"," the subsistence threshold. No transfer is allowed to do this in order to allow"," for a tombstone to be created. Use `seal_terminate` to remove a contract without"," leaving a tombstone behind."]},{"Name":"NewContractNotFunded","Documentation":[" The newly created contract is below the subsistence threshold after executing"," its contructor. No contracts are allowed to exist below that threshold."]},{"Name":"TransferFailed","Documentation":[" Performing the requested transfer failed for a reason originating in the"," chosen currency implementation of the runtime. Most probably the balance is"," too low or locks are placed on it."]},{"Name":"MaxCallDepthReached","Documentation":[" Performing a call was denied because the calling depth reached the limit"," of what is specified in the schedule."]},{"Name":"NotCallable","Documentation":[" The contract that was called is either no contract at all (a plain account)"," or is a tombstone."]},{"Name":"CodeTooLarge","Documentation":[" The code supplied to `put_code` exceeds the limit specified in the current schedule."]},{"Name":"CodeNotFound","Documentation":[" No code could be found at the supplied code hash."]},{"Name":"OutOfBounds","Documentation":[" A buffer outside of sandbox memory was passed to a contract API function."]},{"Name":"DecodingFailed","Documentation":[" Input passed to a contract API function failed to decode as expected type."]},{"Name":"ContractTrapped","Documentation":[" Contract trapped during execution."]},{"Name":"ValueTooLarge","Documentation":[" The size defined in `T::MaxValueSize` was exceeded."]}],"Index":8}],"Extrinsic":{"Version":4,"SignedExtensions":["CheckSpecVersion","CheckTxVersion","CheckGenesis","CheckMortality","CheckNonce","CheckWeight","ChargeTransactionPayment"]}}
